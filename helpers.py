import json
import os
from dataclasses import dataclass
from typing import Dict, Union, Tuple

import requests
from web3 import Web3

from config import load_address, load_private_key


@dataclass
class Account:
    address: str
    private_key: str


def get_account(network: str) -> Account:
    address = load_address(network)
    private_key = load_private_key(network)
    return Account(address=address, private_key=private_key)


def get_w3_provider(network: str) -> Web3:
    if network == "ganache":
        endpoint = "HTTP://127.0.0.1:7545"
    elif network == "rinkeby":
        endpoint = f"https://rinkeby.infura.io/v3/{os.getenv('RINKEBY_API_KEY')}"
    else:
        raise ValueError(f"The network: {network} is not supported")
    return Web3(Web3.HTTPProvider(endpoint))


def get_generated_face() -> Tuple[str, Dict[str, Union[str, float]]]:
    endpoint = f"https://api.generated.photos/api/v1/faces?api_key={os.getenv('GENERATED_FACES_API_KEY')}"
    response = requests.get(endpoint).json()
    face_url = response["faces"][0]["urls"][-1]["512"]
    image_metadata = response["faces"][0]["meta"]
    image_binary = requests.get(face_url).content
    ipfs_url = upload_to_ipfs(image_binary, "generated_face")
    return ipfs_url, image_metadata


def upload_to_ipfs(upload_bytes: bytes, filename: str) -> str:
    ipfs_address = "http://127.0.0.1:5001"
    endpoint = "/api/v0/add"
    response = requests.post(ipfs_address + endpoint, files={filename: upload_bytes}).json()
    ipfs_hash = response["Hash"]
    filename = response["Name"]
    ipfs_url = f"https://ipfs.io/ipfs/{ipfs_hash}?filename={filename}"
    return ipfs_url


def upload_metadata_to_ipfs(image_url: str, image_metadata: Dict[str, Union[str, float]], token_id: int):
    metadata = {}
    metadata["name"] = f"AI generated face #{token_id}"
    metadata["description"] = "Human faces generated by generated.photos"
    metadata["attributes"] = image_metadata
    metadata["image"] = image_url
    metadata_bytes = json.dumps(metadata).encode('utf-8')
    ipfs_url = upload_to_ipfs(metadata_bytes, "metadata")
    return ipfs_url
